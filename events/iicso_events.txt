#########################################################
############### 1xx. Resource Management ################
#########################################################

namespace = iicso

#called on game start, on monthly pulse (for games started in progress)
event = {
    id = iicso.100
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        NOR = { 
            has_global_flag = iicso_active
            has_global_flag = iicso_deactivated
        }
    }

    immediate = {
        set_global_flag = iicso_active

        every_planet = {
            limit = { is_colony = no }

            if = { #immediately set up all planets inside of empires
                limit = { solar_system = { exists = space_owner }}
                set_planet_flag = iicso_initialsetup_ownedsystem
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 29
                }
            }
            else = { #and take care of the rest over the course of the year
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 359
                }
            }
        }
    }
}

#determines number of resources on each planet; called again every year
#called from iicso.100, calls itself
planet_event = {
    id = iicso.101
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        #log = "mineral count triggered on planet [THIS.GetName] in empire [THIS.solar_system.space_owner.GetName]"
        #first find how many resources the mining station produces
        set_planet_resources = yes
        set_timed_planet_flag = {
            flag = iicso_resources_set
            days = 360
        }
        #log = "planet [THIS.GetName] has [THIS.iicso_orbital_minerals] minerals"

        if = {
            limit = { has_planet_flag = iicso_initialsetup_ownedsystem }
            remove_planet_flag = iicso_initialsetup_ownedsystem
            planet_event = {
                id = iicso.101
                days = 1
                random = 359
            }
        }
        else = {
            planet_event = { #check both again a year from now (staggered across the year for different stations, since we triggered it staggered first time)
                id = iicso.101
                days = 360
            }
        }
    }
}

#removes mined resources from empire total, stores it in station stockpile
#on monthly pulse
event = {
    id = iicso.102
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = fallen_empire
                    is_country_type = awakened_fallen_empire
                    is_country_type = iicso_corporate_country
                }
            }
            remove_mining_station_income = yes
            remove_starbase_income = yes            
        }
    }
}



#on mining station destroyed; this - owner of station, fromfrom - station
#clears stockpile from station
country_event = {
    id = iicso.103
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        FROMFROM = {
            solar_system = {
                any_ship_in_system = {
                    is_ship_size = mining_station 
                    fleet = { is_same_value = ROOT }
                }
            }
        }
    }
    immediate = {
        FROMFROM = {
            orbit = {
                set_variable = { which = iicso_stockpile_minerals value = 0 }
                set_variable = { which = iicso_stockpile_alloys value = 0 }
                set_variable = { which = iicso_stockpile_exotic_gases value = 0 }
                set_variable = { which = iicso_stockpile_rare_crystals value = 0 }
                set_variable = { which = iicso_stockpile_volatile_motes value = 0 }
                set_variable = { which = iicso_stockpile_sr_zro value = 0 }
                set_variable = { which = iicso_stockpile_sr_dark_matter value = 0 }
                set_variable = { which = iicso_stockpile_sr_living_metal value = 0 }
                set_variable = { which = iicso_stockpile_food value = 0 }
                set_variable = { which = iicso_stockpile_consumer_goods value = 0 }
            }
        }
        # random_country = {
        #     limit = {
        #         has_country_flag = iicso_faction_of@ROOT
        #     }
        #     every_owned_fleet = {
        #         limit = {
        #             has_fleet_flag = home_station@FROMFROM
        #             has_fleet_flag = civilian_station_freighter
        #         }

        #         remove_fleet_flag = home_station@FROMFROM
        #         set_fleet_flag = pending_reassignment
        #         closest_system = {
        #             limit = {
        #                 any_system_planet = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #             }
        #             random_system_planet = {
        #                 limit = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #                 save_event_target_as = closest_colony
        #             }
        #         }

        #         set_timed_fleet_flag = {
        #             flag = orders_received
        #             days = 120
        #         }
        #         remove_fleet_flag = enroute_to_station
        #         set_fleet_flag = enroute_to_colony
        #         set_fleet_flag = enroute_to_colony@event_target:closest_colony
        #         remove_auto_move_target = yes
        #         auto_move_to_planet = { target = event_target:closest_colony clear_auto_move_on_arrival = yes }
        #     }
        # }
    }
}

#finds stalled civ ships, sends them to iicso.105 to reissue orders or iicso.106 to queue deletion
#triggered by annual pulse gatekeeper, on quarterly basis
country_event = {
    id = iicso.104
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        OR = {
            is_country_type = iicso_civilian_country
            is_country_type = iicso_corporate_country
        }
    }

    immediate = {
        every_owned_fleet = { #TEMPORARY CLEANUP v0.3b
            limit = {
                NOR = {
                    has_fleet_flag = hub_freighter
                    has_fleet_flag = system_freighter
                    has_fleet_flag = station_freighter
                    has_fleet_flag = trader_fleet
                    has_fleet_flag = civilian_miner
                    has_fleet_flag = civilian_gas_miner
                }
            }
            remove_fleet_flag = orders_received
            set_variable = { which = orders_renewed value = 0 }
        } #TEMPORARY CLEANUP v0.3b
        every_owned_fleet = {
            limit = {
                OR = {
                    has_fleet_flag = hub_freighter
                    has_fleet_flag = system_freighter
                    has_fleet_flag = station_freighter
                    has_fleet_flag = trader_fleet
                    has_fleet_flag = civilian_miner
                    has_fleet_flag = civilian_gas_miner
                }
                NOR = {
                    has_fleet_flag = orders_received
                    has_fleet_flag = mining_in_progress
                }
            }
            if = {
                limit = { check_variable = { which = orders_renewed value > 2 }}
                #detroy
                fleet_event = {
                    id = iicso.106
                    days = 1
                    random = 89
                }
            }
            else = {
                fleet_event = {
                    id = iicso.105
                    days = 1
                    random = 89
                }
            }
        }
    }
}

#reissues orders to stalled civ ships
#called by iicso.104
fleet_event = {
    id = iicso.105
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        exists = THIS
    }

    immediate = {
        change_variable = { which = orders_renewed value = 1 }
        set_timed_fleet_flag = {
            flag = orders_received
            days = 360
        }
        remove_auto_move_target = yes
        if = {
            limit = { has_fleet_flag = enroute_to_home }
            random_planet = {
                limit = { ROOT = { has_fleet_flag = fleet_home@PREV }}
                ROOT = {
                    if = {
                        limit = { has_fleet_flag = trader_fleet }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = trader_arrival_home
                        }
                    }
                    else_if = {
                        limit = {
                            OR = {
                                has_fleet_flag = civilian_miner
                                has_fleet_flag = civilian_gas_miner
                            }
                        }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = deposit_cargo_at_colony
                        }
                    }
                }
            }
        }
        else_if = {
            limit = {
                OR = {
                    has_fleet_flag = enroute_to_trade_target
                    has_fleet_flag = enroute_to_colony
                    has_fleet_flag = enroute_to_starbase
                    has_fleet_flag = enroute_to_mining_target
                }
            }
            random_planet = {
                limit = { ROOT = { has_fleet_flag = fleet_destination@PREV }}
                ROOT = {
                    if = {
                        limit = { has_fleet_flag = enroute_to_trade_target }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = trader_arrival
                        }
                    }
                    else_if = {
                        limit = { has_fleet_flag = enroute_to_colony }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = deposit_cargo_at_colony
                        }
                    }
                    else_if = {
                        limit = { has_fleet_flag = enroute_to_starbase }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = deposit_cargo_at_starbase
                        }
                    }
                    else_if = {
                        limit = { has_fleet_flag = enroute_to_mining_target }
                        auto_move_to_planet = {
                            target = PREV
                            clear_auto_move_on_arrival = no
                            arrival_effect = miner_arrival
                        }
                    }
                }
            }
        }
    }
}

#destroy fleet (with death anims), for when fleets get stuck somewhere and their time expires
fleet_event = {
    id = iicso.106
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        exists = THIS
    }

    immediate = {
        destroy_fleet = THIS
    }
}

#delete fleet (no death anims), for when fleets arrive safely and need to be removed
fleet_event = {
    id = iicso.107
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        exists = THIS
    }

    immediate = {   
        delete_fleet = THIS
    }
}

# #monthly pulse gate event
# event = {
#     id = iicso.120
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         #mod initial setup, runs once
#         event = { id = iicso.100 }
#         #monthly calculation of resource income/expenses, removal from empire stockpile
#         event = { id = iicso.102 }
#         #creates civilian countries, sets them to have the right owner, deletes them when parent dead
#         event = { id = iicso.200 }
#         #miner creation event, sends to all owned planets with its own gate event
#         event = { id = iicso.400 }
#         #adds resource to miner cargo
#         event = { id = iicso.403 }
#         #rerelays orders to civilian ships
#         event = { id = iicso.406 }
#     }
# }

#on ship destroyed victim, THIS is owner of ship, FROM is owner of destroying ship
#add opinion modifier against destroyer
country_event = {
    id = iicso.110
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        OR = {
            is_country_type = iicso_civilian_country
            is_country_type = iicso_corporate_country
        }
    }

    immediate = {   
        random_country = {
            limit = {
                OR = {
                    has_country_Flag = iicso_faction_is@ROOT
                    has_country_Flag = iicso_corporation_is@ROOT
                }
            }
            add_opinion_modifier = {
                who = FROM
                modifier = opinion_destroyed_civilian_ship
            }
        }
    }
}

#called on fleet enter system, if hostiles present civs go evasive, else go passive
#THIS is fleet entering, FROM is system
fleet_event = {
    id = iicso.111
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        owner = {
            OR = {
                is_country_type = iicso_civilian_country
                is_country_type = iicso_corporate_country
            }
        }
    }

    immediate = {
        if = {
            limit = {
                FROM = {
                    any_fleet_in_system = {
                        exists = owner
                        owner = {
                            is_hostile_to = ROOT.owner
                        }
                    }
                }
            }
            set_fleet_stance = evasive
        }
        else = {
            set_fleet_stance = passive
        }
    }
}

#called on fleet enter system, if fleet is hostile to local civs, they flee
#THIS is fleet entering, FROM is system
fleet_event = {
    id = iicso.112
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
        FROM = {
            any_fleet_in_system = {
                exists = owner
                owner = {    
                    OR = {
                        is_country_type = iicso_civilian_country
                        is_country_type = iicso_corporate_country
                    }
                    ROOT.owner = { is_hostile_to = PREV }
                }
            }
        }
    }

    immediate = {
        FROM = {
            every_fleet_in_system = {
                limit = {
                    exists = owner
                    owner = {
                        OR = {
                            is_country_type = iicso_civilian_country
                            is_country_type = iicso_corporate_country
                        }
                        ROOT.owner = { is_hostile_to = PREV}
                    }
                }
                set_fleet_stance = evasive
            }
        }
    }
}

# fleet_event = {
#     id = iicso.113
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         has_global_flag = iicso_active
#         exists = THIS
#         owner = {
#             OR = {
#                 is_country_type = iicso_civilian_country
#                 is_country_type = iicso_corporate_country
#             }
#         }
#     }

#     immediate = {
#         fleet_event = {
#             id = iicso.114
#             days = 20
#             random = 10
#         }
#     }
# }

# fleet_event = {
#     id = iicso.114
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         has_global_flag = iicso_active
#         exists = THIS
#         is_in_combat = yes
#     }

#     immediate = {
#         random_system = {
#             limit = {

#             }
#         }
#     }
# }

#yearly pulse gate event (yearly pulse, on game start)
event = {
    id = iicso.121
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        #log = "yearly pulse gate event triggered"
        
        every_country = {
            limit = {
                NOT = {
                    has_country_flag = iicso_checking_hostility_status
                }
                OR = {
                    has_policy_flag = neutral_to_civilians
                    has_policy_flag = hostile_to_enemy_civilians
                    has_policy_flag = hostile_to_all_civilians
                }
            }
            country_event = {
                id = iicso.202
                days = 1
                random = 359
            }
        }
        
        #quarterly events

        every_country = {
            limit = {
                OR = {
                    is_country_type = iicso_civilian_country
                    is_country_type = iicso_corporate_country
                }
            }
            country_event = {
                id = iicso.104
                days = 1
                random = 89
            }
            country_event = {
                id = iicso.104
                days = 91
                random = 89
            }
            country_event = {
                id = iicso.104
                days = 181
                random = 89
            }
            country_event = {
                id = iicso.104
                days = 271
                random = 89
            }
        }

        #semiannual events

        #station freighter running
        random_country = {
            limit = { is_country_type = global_event }
            country_event = {
                id = iicso.500
                days = 0
            }
            country_event = {
                id = iicso.500
                days = 180
            }
        }
        #mining ships
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = awakened_fallen_empire
                }
            }
            country_event = {
                id = iicso.400
                days = 0
            }
            country_event = {
                id = iicso.400
                days = 180
            }
        }

        #corp takes over mining station
        every_country = {
            limit = {
                is_country_type = default
                OR = {
                    has_policy_flag = weak_corporate_freedom
                    has_policy_flag = strong_corporate_freedom
                    has_policy_flag = pseudonational_corporations
                }
            }
            country_event = {
                id = iicso.910
                days = 1
                random = 179
            }
            country_event = {
                id = iicso.910
                days = 181
                random = 179
            }
        }
    }
}

#########################################################
############### 2xx. Faction Management #################
#########################################################

#spawns civilian trader faction for each empire
#called on game start, on monthly pulse
event = {
    id = iicso.200
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        every_country = {
			limit = {
				OR = {
					is_country_type = default
                    is_country_type = awakened_fallen_empire
                    is_country_type = fallen_empire
                }
            }

            if = {
                limit = {
                    NOT = {
                        any_country = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_civilian_country
                        }
                    }
                }

                create_country = {
                    name = THIS
                    type = iicso_civilian_country
                    ignore_initial_colony_error = yes
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
                
                establish_communications_no_message = last_created_country
                set_country_flag = iicso_faction_is@last_created_country

                last_created_country = {
                    #log = "test: [THIS.GetName] is a civilian empire. Overlord is [THIS.overlord.GetName]"
                    set_subject_of = {
                        who = PREV
                        subject_type = iicso_civilian_subject
                    }
                    set_country_flag = iicso_civilian_country
                    set_country_flag = iicso_faction_of@PREV
                    copy_techs_from = { target = PREV }
                    set_name = random
                    #log = "[THIS.GetName] is economy vassal of [PREV.GetName]"

                    #share comms with every country who already has comms with parent country
                    every_country = {
                        limit = {
                            has_communications = PREVPREV
                            NOT = { has_country_flag = iicso_faction_is@PREV }
                        }
                        establish_communications_no_message = PREV

                        #only be hostile to civs if hostile to all, or at war with parent and hostile to enemy civs
                        # if = {
                        #     limit = {
                        #         OR = {
                        #             has_policy_flag = hostile_to_all_civilians
                        #             AND = {
                        #                 has_policy_flag = hostile_to_enemy_civilians
                        #                 is_at_war_with = PREVPREV
                        #             }
                        #         }
                        #     }
                        #     set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                        # }
                    }
                }
                #log = "[THIS.GetName] is economy overlord of [last_created_country.GetName]"

                if = {
                    limit = { NOT = { has_country_flag = Story7 }}
                    set_country_flag = Story7
                    set_country_flag = avoiding_first_contact
                }

                if = {
                    limit = { has_country_flag = avoiding_first_contact }
                    remove_country_flag = Story7
                    remove_country_flag = avoiding_first_contact
                }
            }
        }

        #reestablish vassalhood (important if parent country is vassalised and later becomes free, for example)
        every_country = {
            limit = {
                OR = {
                    has_country_flag = iicso_civilian_country
                    has_country_flag = iicso_corporate_country
                }
            }
            random_country = {
                limit = {
                    OR = {
                        has_country_flag = iicso_faction_is@PREV
                        has_country_flag = iicso_corporation_is@PREV
                    }
                }
                PREV = {
                    copy_techs_from = { target = PREV }
                    if = {
                        limit = {
                            #is_country_Type = iicso_civilian_country
                            OR = {
                                is_subject = no
                                overlord = {
                                    NOR = {
                                        has_country_flag = iicso_faction_is@PREV
                                        has_country_flag = iicso_corporation_is@PREV
                                    }
                                }
                            }
                            PREV = {
                                has_country_flag = iicso_faction_is@PREV
                                is_subject = no
                            }
                        }
                        set_subject_of = {
                            who = PREV
                            subject_type = iicso_civilian_subject
                        }
                    }
                    if = {
                        limit = {
                            NOT = {
                                any_country = {
                                    OR = {
                                        has_country_flag = iicso_faction_is@PREV
                                        has_country_flag = iicso_corporation_is@PREV
                                    }
                                }
                            }
                        }
                        destroy_country = yes
                    }
                }
            }
        }
    }
}

#triggered by communications established with from; establishes communications with civilian empires
country_event = {
    id = iicso.201
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        every_country = {
            limit = {
                OR = {
                    has_country_flag = iicso_faction_of@ROOT
                    has_country_flag = iicso_corporation_of@ROOT
                }
            }
            establish_communications_no_message = FROM
            # FROM = {
            #     if = {
            #         limit = {
            #             has_policy_flag = hostile_to_all_civilians
            #         }
            #         set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
            #     }
            # }
        }
        every_country = {
            limit = {
                OR = {
                    has_country_flag = iicso_faction_of@FROM
                    has_country_flag = iicso_corporation_of@FROM
                }
            }
            establish_communications_no_message = ROOT
            # ROOT = {
            #     if = {
            #         limit = { has_policy_flag = hostile_to_all_civilians }
            #         set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
            #     }
            # }
        }
    }
}

#sets correct faction hositilies based on policy
#called by annual gatekeeper, fires itself quarterly
country_event = {
    id = iicso.202
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_global_flag = iicso_active
		OR = {
            has_policy_flag = neutral_to_civilians
            has_policy_flag = hostile_to_enemy_civilians
            has_policy_flag = hostile_to_all_civilians
		}
    }

    immediate = {
        if = {
            limit = { NOT = { has_country_flag = iicso_checking_hostility_status }}
            set_timed_country_flag = {
                flag = iicso_checking_hostility_status
                days = 90
            }
        }
        if = {
            limit = { has_policy_flag = neutral_to_civilians }
            every_country = {
                limit = {
                    OR = {
                        is_country_type = iicso_civilian_country
                        is_country_type = iicso_corporate_country
                    }
                }
                ROOT = {
                    set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                }
            }
        }
        else_if = {
            limit = { has_policy_flag = hostile_to_enemy_civilians }
            every_country = {
                limit = {
                    has_communications = ROOT
                    is_at_war_with = ROOT
                    OR = {
                        is_country_type = default
                        is_country_type = awakened_fallen_empire
                    }
                }
                every_country = {
                    limit = {
                        OR = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_corporation_of@PREV
                        }
                    }
                    ROOT = {
                        set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                    }
                }
            }
            every_country = {
                limit = {
                    has_communications = ROOT
                    NOT = { is_at_war_with = ROOT }
                    OR = {
                        is_country_type = default
                        is_country_type = awakened_fallen_empire
                    }
                }
                every_country = {
                    limit = {
                        OR = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_corporation_of@PREV
                        }
                    }
                    ROOT = {
                        set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                    }
                }
            }
        }
        else_if = {
            limit = { has_policy_flag = hostile_to_all_civilians }
            every_country = {
                limit = {
                    has_communications = ROOT
                    OR = {
                        is_country_type = default
                        is_country_type = awakened_fallen_empire
                    }
                    NOR = {
                        is_in_federation_with = ROOT
                        has_defensive_pact = ROOT
                        has_non_aggression_pact = ROOT
                        is_same_value = ROOT
                        is_overlord_to = ROOT
                        has_overlord = ROOT
                    }
                }
                every_country = {
                    limit = {
                        OR = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_corporation_of@PREV
                        }
                    }
                    ROOT = {
                        set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                    }
                }
            }
            every_country = {
                limit = {
                    has_communications = ROOT
                    OR = {
                        is_country_type = default
                        is_country_type = awakened_fallen_empire
                    }
                    OR = {
                        is_in_federation_with = ROOT
                        has_defensive_pact = ROOT
                        has_non_aggression_pact = ROOT
                        is_same_value = ROOT
                        is_overlord_to = ROOT
                        has_overlord = ROOT
                    }
                }
                every_country = {
                    limit = {
                        OR = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_corporation_of@PREV
                        }
                    }
                    ROOT = {
                        set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                    }
                }
            }
        }
        country_event = {
            id = iicso.202
            days = 90
        }
    }
}

#sets country with appropriate policy hostile to enemy civilians on war start
#called from on war beginning, on war entered
# country_event = {
#     id = iicso.210
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         has_global_flag = iicso_active
#         has_policy_flag = hostile_to_enemy_civilians
#     }

#     immediate = {
#         every_country = {
#             limit = { is_at_war_with = ROOT }
#             every_country = {
#                 limit = {
#                     OR = {
#                         has_country_flag = iicso_faction_of@PREV
#                         has_country_flag = iicso_corporation_of@PREV
#                     }
#                 }
#                 ROOT = {
#                     set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
#                 }
#             }
#         }
#     }
# }

#on war end sets countries with appropriate policy back to neutral with former enemy civilian factions
#does this even work??
# country_event = {
#     id = iicso.211
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = { has_global_flag = iicso_active }

#     immediate = {
#         #log = "a war has ended"

#         every_war_defender = {
#             enemy = FROM
#             limit = { has_policy_flag = hostile_to_enemy_civilians }
#             ROOT = {
#                 every_war_attacker = {
#                     enemy = FROM
#                     every_country = {
#                         limit = {
#                             OR = {
#                                 has_country_flag = iicso_faction_of@PREV
#                                 has_country_flag = iicso_corporation_of@PREV
#                             }
#                         }
#                         PREVPREVPREV = {
#                             set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
#                         }
#                     }
#                 }
#             }
#         }

#         every_war_attacker = {
#             enemy = FROM
#             limit = { has_policy_flag = hostile_to_enemy_civilians }
#             ROOT = {
#                 every_war_defender = {
#                     enemy = FROM
#                     every_country = {
#                         limit = {
#                             OR = {
#                                 has_country_flag = iicso_faction_of@PREV
#                                 has_country_flag = iicso_corporation_of@PREV
#                             }
#                         }
#                         PREVPREVPREV = {
#                             set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
#                         }
#                     }
#                 }
#             }
#         }

#         # every_country = {
#         #     limit = { has_policy_flag = hostile_to_enemy_civilians }
#         #     log = "war ended, [THIS.GetName] hostile only to enemy civilians"
#         #     every_country = {
#         #         limit = {
#         #             any_country = {
#         #                 has_country_flag = iicso_faction_is@PREV
#         #                 NOT = { is_at_war_with = PREVPREV }
#         #             }
#         #             has_communications = PREV
#         #         }
#         #         log = "war ended, [THIS.GetName] is not at war with [PREV.GetName]"
#         #         PREV = { 
#         #             set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
#         #         }
#         #     }
#         # }
#     }
# }

#needs to trigger event after war has cleared out
#???
# country_event = {
#     id= iicso.212
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         country_event = {
#             id = iicso.211
#             days = 5
#         }
#     }
# }

#remove civilian factions from federation, called from on join federation
#THIS is federation leader, FROM is joining empire
country_event = {
    id = iicso.220
    is_triggered_only = yes
    hide_window = yes

    trigger = { has_global_flag = iicso_active }

    immediate = {
        FROM = {
            if = {
                limit = {
                    OR = {
                        is_country_type = iicso_civilian_country
                        is_country_type = iicso_corporate_country
                    }
                }
                leave_alliance = { override_requirements = yes }
            }
            else = {
                every_country = {
                    limit = {
                        OR = {
                            has_country_flag = iicso_faction_of@FROM
                            has_country_flag = iicso_corporation_of@FROM
                        }
                    }
                    leave_alliance = { override_requirements = yes }
                }
            }
        }
    }
}

#on join federation with indiscriminate civ hostility, removes hostility to allies' civs
# country_event = {
#     id = iicso.221
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         has_global_flag = iicso_active
#         FROM = { has_policy_Flag = hostile_to_all_civilians }
#     }

#     immediate = {
#         every_country = {
#             limit = {
#                 any_country = {
#                     is_in_federation_with = FROM
#                     OR = {
#                         has_country_flag = iicso_faction_is@PREV
#                         has_country_flag = iicso_corporation_is@PREV
#                     }
#                 }
#             }
#             FROM = {
#                 set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
#             }
#         }
#     }
# }

#on leave federation with indiscriminate civ hostility, adds hostility to civs back
# country_event = {
#     id = iicso.222
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         has_global_flag = iicso_active
#         FROM = { has_policy_Flag = hostile_to_all_civilians }
#     }

#     immediate = {
#         every_country = {
#             limit = {
#                 any_country = {
#                     NOR = {
#                         is_in_federation_with = PREVPREV
#                         has_defensive_pact = PREVPREV
#                         has_non_aggression_pact = PREVPREV
#                         is_same_value = PREVPREV
#                     }
#                     OR = {
#                         has_country_flag = iicso_faction_is@PREV
#                         has_country_flag = iicso_corporation_is@PREV
#                     }
#                 }
#             }
#             FROM = {
#                 set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
#             }
#         }
#     }
# }


# counts number of civ ships in the game
# event = {
#     id = iicso.6000
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         random_country = {
#             limit = {
#                 OR = {
#                     has_country_flag = counting_country
#                     NOT = { any_country = { has_country_flag = counting_country }}
#                 }
#             }
#             set_country_flag = counting_country
#             save_event_target_as = player_country
#             set_variable = { which = civilian_ship_count value = 0 }
#         }
#         every_country = {
#             limit = { has_country_flag = iicso_civilian_country }
#             every_owned_ship = {
#                 event_target:player_country = { change_variable = { which = civilian_ship_count value = 1 }}
#             }
#         }
#         event_target:player_country = {
#             if = {
#                 limit = { check_variable = { which = civilian_ship_count value > 0 }} 
#                 log = "[THIS.GetName] says there are [THIS.civilian_ship_count] civilian ships"
#             }
#         }
#     }
# }