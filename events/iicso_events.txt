namespace = iicso

event = {
    id = iicso.50
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        log = "iicso.50 triggered"
        every_planet = {
            limit = { has_mining_station = yes }
            mining_station = {
                solar_system = {
                    space_owner = {
                        random_country = {
                            limit = { has_country_flag = iicso_faction_of@PREV }
                            PREVPREVPREV = {
                                set_owner = PREV
                            }
                        }
                    }
                }
            }
        }
    }
}
#########################################################
############### 1xx. Resource Management ################
#########################################################
#called on game start, on monthly pulse (for games started in progress)
event = {
    id = iicso.100
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        NOR = { 
            has_global_flag = iicso_active
            has_global_flag = iicso_deactivated
        }
    }

    immediate = {
        #log = "initial event triggered"
        set_global_flag = iicso_active

        every_planet = {
            limit = { is_colony = no }

            if = { #immediately set up all planets inside of empires
                limit = { solar_system = { exists = space_owner }}
                set_planet_flag = iicso_initialsetup_ownedsystem
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 29
                }
            }
            else = { #and take care of the rest over the course of the year
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 359
                }
            }
        }
    }
}

#determines number of resources on each planet; called again every year
#called from iicso.100, calls itself
planet_event = {
    id = iicso.101
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "mineral count triggered on planet [THIS.GetName] in empire [THIS.solar_system.space_owner.GetName]"
        #first find how many resources the mining station produces
        set_planet_resources = yes
        set_planet_flag = iicso_resources_set
        #log = "planet [THIS.GetName] has [THIS.iicso_orbital_minerals] minerals"

        if = {
            limit = { has_planet_flag = iicso_initialsetup_ownedsystem }
            remove_planet_flag = iicso_initialsetup_ownedsystem
            planet_event = {
                id = iicso.101
                days = 1
                random = 359
            }
        }
        else = {
            planet_event = { #check both again a year from now (staggered across the year for different stations, since we triggered it staggered first time)
                id = iicso.101
                days = 360
            }
        }
    }
}

#removes mined resources from empire total, stores it in station stockpile
#on monthly pulse
event = {
    id = iicso.102
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = fallen_empire
                    is_country_type = awakened_fallen_empire
                }
            }
            remove_mining_station_income = yes
            remove_starbase_income = yes            
        }
    }
}



#on mining station destroyed; this - owner of station, fromfrom - station
country_event = {
    id = iicso.103
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROMFROM = {
            solar_system = {
                any_ship_in_system = {
                    is_ship_size = mining_station 
                    fleet = { is_same_value = ROOT }
                }
            }
        }
    }
    immediate = {
        FROMFROM = {
            orbit = {
                set_variable = { which = iicso_stockpile_minerals value = 0 }
                set_variable = { which = iicso_stockpile_alloys value = 0 }
                set_variable = { which = iicso_stockpile_exotic_gases value = 0 }
                set_variable = { which = iicso_stockpile_rare_crystals value = 0 }
                set_variable = { which = iicso_stockpile_volatile_motes value = 0 }
                set_variable = { which = iicso_stockpile_sr_zro value = 0 }
                set_variable = { which = iicso_stockpile_sr_dark_matter value = 0 }
                set_variable = { which = iicso_stockpile_sr_living_metal value = 0 }
                set_variable = { which = iicso_stockpile_food value = 0 }
                set_variable = { which = iicso_stockpile_consumer_goods value = 0 }
            }
        }
        # random_country = {
        #     limit = {
        #         has_country_flag = iicso_faction_of@ROOT
        #     }
        #     every_owned_fleet = {
        #         limit = {
        #             has_fleet_flag = home_station@FROMFROM
        #             has_fleet_flag = civilian_station_freighter
        #         }

        #         remove_fleet_flag = home_station@FROMFROM
        #         set_fleet_flag = pending_reassignment
        #         closest_system = {
        #             limit = {
        #                 any_system_planet = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #             }
        #             random_system_planet = {
        #                 limit = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #                 save_event_target_as = closest_colony
        #             }
        #         }

        #         set_timed_fleet_flag = {
        #             flag = orders_received
        #             days = 120
        #         }
        #         remove_fleet_flag = enroute_to_station
        #         set_fleet_flag = enroute_to_colony
        #         set_fleet_flag = enroute_to_colony@event_target:closest_colony
        #         remove_auto_move_target = yes
        #         auto_move_to_planet = { target = event_target:closest_colony clear_auto_move_on_arrival = yes }
        #     }
        # }
    }
}

# #monthly pulse gate event
# event = {
#     id = iicso.120
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         #mod initial setup, runs once
#         event = { id = iicso.100 }
#         #monthly calculation of resource income/expenses, removal from empire stockpile
#         event = { id = iicso.102 }
#         #creates civilian countries, sets them to have the right owner, deletes them when parent dead
#         event = { id = iicso.200 }
#         #miner creation event, sends to all owned planets with its own gate event
#         event = { id = iicso.400 }
#         #adds resource to miner cargo
#         event = { id = iicso.403 }
#         #rerelays orders to civilian ships
#         event = { id = iicso.406 }
#     }
# }

#yearly pulse gate event (yearly pulse, on game start)
event = {
    id = iicso.121
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "yearly pulse gate event triggered"
        #quarterly events
        
        

        #semiannual events

        #station freighter running
        random_country = {
            limit = { is_country_type = global_event }
            country_event = {
                id = iicso.500
                days = 0
            }
            country_event = {
                id = iicso.500
                days = 180
            }
        }
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = awakened_fallen_empire
                }
            }
            country_event = {
                id = iicso.400
                days = 0
            }
            country_event = {
                id = iicso.400
                days = 180
            }
        }
    }
}

#########################################################
################ 2xx. Faction Spawning ##################
#########################################################

#spawns civilian trader faction for each empire
#called on game start, on monthly pulse
event = {
    id = iicso.200
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
			limit = {
				OR = {
					is_country_type = default
                    is_country_type = awakened_fallen_empire
                    is_country_type = fallen_empire
                }
            }

            if = {
                limit = {
                    NOT = {
                        any_country = {
                            has_country_flag = iicso_faction_of@PREV
                            has_country_flag = iicso_civilian_country
                        }
                    }
                }

                if = {
                    limit = { NOT = { has_country_flag = Story7 }}
                    set_country_flag = Story7
                    set_country_flag = avoiding_first_contact
                }

                create_country = {
                    name = THIS
                    type = iicso_civilian_country
                    ignore_initial_colony_error = yes
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
                
                establish_communications_no_message = last_created_country
                set_country_flag = iicso_faction_is@last_created_country

                last_created_country = {
                    #log = "test: [THIS.GetName] is a civilian empire. Overlord is [THIS.overlord.GetName]"
                    set_subject_of = {
                        who = PREV
                        subject_type = iicso_civilian_subject
                    }
                    set_country_flag = iicso_civilian_country
                    set_country_flag = iicso_faction_of@PREV
                    copy_techs_from = { target = PREV }
                    set_name = random
                    #log = "[THIS.GetName] is economy vassal of [PREV.GetName]"

                    #share comms with every country who already has comms with parent country
                    every_country = {
                        limit = {
                            OR = {
                                is_country_type = default
                                is_country_type = fallen_empire
                                is_country_type = awakened_fallen_empire
                            }
                            has_communications = PREVPREV
                            NOT = { has_country_flag = iicso_faction_is@PREV }
                        }
                        establish_communications_no_message = PREV

                        #only be hostile to civs if hostile to all, or at war with parent and hostile to enemy civs
                        if = {
                            limit = {
                                OR = {
                                    has_policy_flag = hostile_to_all_civilians
                                    AND = {
                                        has_policy_flag = hostile_to_enemy_civilians
                                        is_at_war_with = PREVPREV
                                    }
                                }
                            }
                            set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                        }
                    }
                }
                #log = "[THIS.GetName] is economy overlord of [last_created_country.GetName]"

                if = {
                    limit = { has_country_flag = avoiding_first_contact }
                    remove_country_flag = Story7
                    remove_country_flag = avoiding_first_contact
                }
            }
        }

        #reestablish vassalhood (important if parent country is vassalised and later becomes free, for example)
        every_country = {
            limit = { has_country_flag = iicso_civilian_country }

            random_country = {
                limit = { has_country_flag = iicso_faction_is@PREV }
                
                save_event_target_as = parent_empire
            }
            copy_techs_from = { target = event_target:parent_empire }
            if = {
                limit = {
                    OR = {
                        is_subject = no
                        overlord = { NOT = { has_country_flag = iicso_faction_is@PREV }}
                    }
                    any_country = {
                        has_country_flag = iicso_faction_is@PREV
                        is_subject = no
                    }
                }
                event_target:parent_empire = {
                    PREV = {
                        set_subject_of = {
                            who = PREV
                            subject_type = iicso_civilian_subject
                        }
                    }
                }
            }

            #delete civ faction if parent empire dies
            if = {
                limit = { NOT = { exists = event_target:parent_empire }}
                destroy_country = yes
            }

        }
    }
}

#triggered by communications established with from; establishes communications with civilian empires
country_event = {
    id = iicso.201
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        random_country = {
            limit = { has_country_flag = iicso_faction_of@ROOT }
            establish_communications_no_message = FROM
            FROM = {
                if = {
                    limit = { has_policy_flag = hostile_to_all_civilians }
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
        random_country = {
            limit = { has_country_flag = iicso_faction_of@FROM }
            establish_communications_no_message = ROOT
            ROOT = {
                if = {
                    limit = { has_policy_flag = hostile_to_all_civilians }
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
    }
}

#sets country with appropriate policy hostile to enemy civilians on war start
#called from on war beginning, on war entered
country_event = {
    id = iicso.210
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_policy_flag = hostile_to_enemy_civilians
    }

    immediate = {
        every_country = {
            limit = { is_at_war_with = PREV }
            random_country = {
                limit = { has_country_flag = iicso_faction_of@PREV }
                PREVPREV = {
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
    }
}

#on war end sets countries with appropriate policy back to neutral with former enemy civilian factions
#does this even work??
country_event = {
    id = iicso.211
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "a war has ended"

        every_war_defender = {
            enemy = FROM
            limit = { has_policy_flag = hostile_to_enemy_civilians }
            ROOT = {
                every_war_attacker = {
                    enemy = FROM
                    random_country = {
                        limit = { has_country_flag = iicso_faction_of@PREV }
                        PREVPREVPREV = {
                            set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                        }
                    }
                }
            }
        }

        every_war_attacker = {
            enemy = FROM
            limit = { has_policy_flag = hostile_to_enemy_civilians }
            ROOT = {
                every_war_defender = {
                    enemy = FROM
                    random_country = {
                        limit = { has_country_flag = iicso_faction_of@PREV }
                        PREVPREVPREV = {
                            set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                        }
                    }
                }
            }
        }

        # every_country = {
        #     limit = { has_policy_flag = hostile_to_enemy_civilians }
        #     log = "war ended, [THIS.GetName] hostile only to enemy civilians"
        #     every_country = {
        #         limit = {
        #             any_country = {
        #                 has_country_flag = iicso_faction_is@PREV
        #                 NOT = { is_at_war_with = PREVPREV }
        #             }
        #             has_communications = PREV
        #         }
        #         log = "war ended, [THIS.GetName] is not at war with [PREV.GetName]"
        #         PREV = { 
        #             set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
        #         }
        #     }
        # }
    }
}

#needs to trigger event after war has cleared out
#???
# country_event = {
#     id= iicso.212
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         country_event = {
#             id = iicso.211
#             days = 5
#         }
#     }
# }



# event = {
#     id = iicso.6000
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         random_country = {
#             limit = {
#                 OR = {
#                     has_country_flag = counting_country
#                     NOT = { any_country = { has_country_flag = counting_country }}
#                 }
#             }
#             set_country_flag = counting_country
#             save_event_target_as = player_country
#             set_variable = { which = civilian_ship_count value = 0 }
#         }
#         every_country = {
#             limit = { has_country_flag = iicso_civilian_country }
#             every_owned_ship = {
#                 event_target:player_country = { change_variable = { which = civilian_ship_count value = 1 }}
#             }
#         }
#         event_target:player_country = {
#             if = {
#                 limit = { check_variable = { which = civilian_ship_count value > 0 }} 
#                 log = "[THIS.GetName] says there are [THIS.civilian_ship_count] civilian ships"
#             }
#         }
#     }
# }