namespace = iicso

event = {
    id = iicso.50
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        log = "iicso.50 triggered"
        every_planet = {
            limit = { has_mining_station = yes }
            mining_station = {
                solar_system = {
                    space_owner = {
                        random_country = {
                            limit = { has_country_flag = civ_faction_of@PREV }
                            PREVPREVPREV = {
                                set_owner = PREV
                            }
                        }
                    }
                }
            }
        }
    }
}
#########################################################
############### 1xx. Resource Management ################
#########################################################
#called on game start, on monthly pulse (for games started in progress)
event = {
    id = iicso.100
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        NOR = { 
            has_global_flag = iicso_active
            has_global_flag = iicso_deactivated
        }
    }

    immediate = {
        #log = "initial event triggered"
        set_global_flag = iicso_active

        every_planet = {
            limit = { is_colony = no }

            if = { #immediately set up all planets inside of empires
                limit = { solar_system = { exists = space_owner }}
                set_planet_flag = iicso_initialsetup_ownedsystem
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 29
                }
            }
            else = { #and take care of the rest over the course of the year
                planet_event = {
                    id = iicso.101
                    days = 1
                    random = 359
                }
            }
        }
        every_system = {
            limit = {
                any_system = {
                    exists = space_owner
                    distance = {
                        source = PREV
                        min_jumps = 0
                        max_jumps = 2
                        use_bypasses = yes
                        bypass_empire = space_owner
                    }
                }
            }
            random_system_planet = {
                planet_event = {
                    id = iicso.111
                }
            }
        }
    }
}

#determines number of resources on each planet; called again every year
#called from iicso.100, calls itself
planet_event = {
    id = iicso.101
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "mineral count triggered on planet [THIS.GetName] in empire [THIS.solar_system.space_owner.GetName]"
        #first find how many resources the mining station produces
        set_planet_resources = yes
        set_planet_flag = iicso_resources_set
        #log = "planet [THIS.GetName] has [THIS.iicso_orbital_minerals] minerals"

        if = {
            limit = { has_planet_flag = iicso_initialsetup_ownedsystem }
            remove_planet_flag = iicso_initialsetup_ownedsystem
            planet_event = {
                id = iicso.101
                days = 1
                random = 359
            }
        }
        else = {
            planet_event = { #check both again a year from now (staggered across the year for different stations, since we triggered it staggered first time)
                id = iicso.101
                days = 360
            }
        }
    }
}

#removes mined resources from empire total, stores it in station stockpile
#on monthly pulse
event = {
    id = iicso.102
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = fallen_empire
                    is_country_type = awakened_fallen_empire
                }
            }
            remove_mining_station_income = yes
            remove_starbase_income = yes            
        }
    }
}



#on mining station destroyed; this - owner of station, fromfrom - station
country_event = {
    id = iicso.103
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROMFROM = {
            solar_system = {
                any_ship_in_system = {
                    is_ship_size = mining_station 
                    fleet = { is_same_value = ROOT }
                }
            }
        }
    }
    immediate = {
        FROMFROM = {
            orbit = {
                set_variable = { which = station_freighter_delay value = 0 }
                set_variable = { which = iicso_stockpile_minerals value = 0 }
                set_variable = { which = iicso_stockpile_alloys value = 0 }
                set_variable = { which = iicso_stockpile_exotic_gases value = 0 }
                set_variable = { which = iicso_stockpile_rare_crystals value = 0 }
                set_variable = { which = iicso_stockpile_volatile_motes value = 0 }
                set_variable = { which = iicso_stockpile_zro value = 0 }
                set_variable = { which = iicso_stockpile_dark_matter value = 0 }
                set_variable = { which = iicso_stockpile_living_metal value = 0 }
                set_variable = { which = iicso_stockpile_food value = 0 }
                set_variable = { which = iicso_stockpile_consumer_goods value = 0 }
            }
        }
        # random_country = {
        #     limit = {
        #         has_country_flag = civ_faction_of@ROOT
        #     }
        #     every_owned_fleet = {
        #         limit = {
        #             has_fleet_flag = home_station@FROMFROM
        #             has_fleet_flag = civilian_station_freighter
        #         }

        #         remove_fleet_flag = home_station@FROMFROM
        #         set_fleet_flag = pending_reassignment
        #         closest_system = {
        #             limit = {
        #                 any_system_planet = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #             }
        #             random_system_planet = {
        #                 limit = {
        #                     is_colony = yes
        #                     owner = { is_same_value = ROOT }
        #                 }
        #                 save_event_target_as = closest_colony
        #             }
        #         }

        #         set_timed_fleet_flag = {
        #             flag = orders_received
        #             days = 120
        #         }
        #         remove_fleet_flag = enroute_to_station
        #         set_fleet_flag = enroute_to_colony
        #         set_fleet_flag = enroute_to_colony@event_target:closest_colony
        #         remove_auto_move_target = yes
        #         auto_move_to_planet = { target = event_target:closest_colony clear_auto_move_on_arrival = yes }
        #     }
        # }
    }
}

#when colonies are created or change hands, relevant empires recalculate closest colonies for all of their systems
#called on colonized, on planet transfer, on colony destroyed
planet_event = {
    id = iicso.110
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "triggered nearest solar system at [THIS.solar_system.GetName]"
        every_system = { #every system that has flag pointing to this event's planet's solar system
            limit = {
                ROOT = {
                    solar_system = {
                        PREVPREV = { has_star_flag = nearest_colony_system@PREV }
                    }
                }
            }
            remove_star_flag = nearest_colony_system@ROOT.solar_system
        }

        if = {
            limit = { exists = FROM }
            FROM = { save_event_target_as = colony_owner }
            owner = { save_event_target_as = prev_owner }
        }
        else_if = {
            limit = { exists = owner }
            owner = { save_event_target_as = colony_owner }
        }

        if = {
            limit = { exists = event_target:colony_owner }
            event_target:colony_owner = {
                every_system = {
                    limit = {
                        any_system = {
                            exists = space_owner
                            space_owner = { is_same_value = PREVPREVPREV }
                            distance = {
                                source = PREV
                                min_jumps = 0
                                max_jumps = 2
                                use_bypasses = yes
                                bypass_empire = space_owner
                            }
                        }
                    }
                    random_system_planet = {
                        planet_event = {
                            id = iicso.111
                            days = 3
                        }
                    }
                }
            }
        }
        if = {
            limit = { exists = event_target:prev_owner }
            event_target:prev_owner = {
                every_system = {
                    limit = {
                        any_system = {
                            exists = space_owner
                            space_owner = { is_same_value = PREVPREVPREV }
                            distance = {
                                source = PREV
                                min_jumps = 0
                                max_jumps = 2
                                use_bypasses = yes
                                bypass_empire = space_owner
                            }
                        }
                    }
                    random_system_planet = {
                        planet_event = {
                            id = iicso.111
                            days = 3
                        }
                    }
                }
            }
        }
    }
}

#called from iicso.100, iicso.110, iicso.112
#calculates closest colony for given system
planet_event = {
    id = iicso.111
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        solar_system = {
            every_system = {
                limit = { PREV = { has_star_flag = nearest_colony_system@PREV }}
                PREV = { remove_star_flag = nearest_colony_system@PREV }
            }
            if = {
                limit = { exists = space_owner }
                closest_system = {
                    limit = {
                        any_system_planet = {
                            is_colony = yes
                            exists = owner
                            owner = { is_same_value = ROOT.space_owner }
                        }
                    }
                    PREV = { set_star_flag = nearest_colony_system@PREV }
                }
            }
            else = {
                every_country = {
                    limit = {
                        any_system_within_border = {
                            distance = {
                                source = PREVPREV
                                min_jumps = 0
                                max_jumps = 2
                                use_bypasses = yes
                                bypass_empire = PREV
                            }
                        }
                    }
                    save_event_target_as = border_country
                    PREV = {
                        closest_system = {
                            limit = {
                                any_system_planet = {
                                    is_colony = yes
                                    exists = owner
                                    owner = { is_same_value = event_target:border_country }
                                }
                            }
                            PREV = { set_star_flag = nearest_colony_system@PREV }
                        }
                    }
                }
            }
        }
    }
}

#called on starbase transfer or starbase being built, triggers 111 to calculate closest colony for system
#THIS is either the starbase or construction ship, depending on how it was triggered
ship_event = {
    id = iicso.112
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        solar_system = {
            random_system_planet = {
                planet_event = {
                    id = iicso.111
                    days = 3
                }
            }
            every_system = {
                limit = {
                    NOT = { exists = space_owner }
                    distance = {
                        source = PREV
                        min_jumps = 0
                        max_jumps = 2
                        use_bypasses = yes
                        bypass_empire = ROOT.owner
                    }
                }
                random_system_planet = {
                    planet_event = {
                        id = iicso.111
                        days = 3
                    }
                }
            }
        }
    }
}

# #monthly pulse gate event
# event = {
#     id = iicso.120
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         #mod initial setup, runs once
#         event = { id = iicso.100 }
#         #monthly calculation of resource income/expenses, removal from empire stockpile
#         event = { id = iicso.102 }
#         #creates civilian countries, sets them to have the right owner, deletes them when parent dead
#         event = { id = iicso.200 }
#         #miner creation event, sends to all owned planets with its own gate event
#         event = { id = iicso.400 }
#         #adds resource to miner cargo
#         event = { id = iicso.404 }
#         #rerelays orders to civilian ships
#         event = { id = iicso.406 }
#     }
# }

#yearly pulse gate event (yearly pulse, on game start)
event = {
    id = iicso.121
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "yearly pulse gate event triggered"
        #quarterly events
        
        

        #semiannual events

        #station freighter running
        random_country = {
            limit = { is_country_type = global_event }
            country_event = {
                id = iicso.500
                days = 0
            }
            country_event = {
                id = iicso.500
                days = 180
            }
        }
    }
}

#########################################################
################ 2xx. Faction Spawning ##################
#########################################################

#spawns civilian trader faction for each empire
#called on game start, on monthly pulse
event = {
    id = iicso.200
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
			limit = {
				OR = {
					is_country_type = default
                    is_country_type = awakened_fallen_empire
                    is_country_type = fallen_empire
                }
            }

            if = {
                limit = {
                    NOT = {
                        any_country = {
                            has_country_flag = civ_faction_of@PREV
                            has_country_flag = iicso_civilian_country
                        }
                    }
                }

                if = {
                    limit = { NOT = { has_country_flag = Story7 }}
                    set_country_flag = Story7
                    set_country_flag = avoiding_first_contact
                }

                create_country = {
                    name = THIS
                    type = iicso_civilian_country
                    ignore_initial_colony_error = yes
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
                
                establish_communications_no_message = last_created_country
                set_country_flag = civ_faction@last_created_country

                last_created_country = {
                    #log = "test: [THIS.GetName] is a civilian empire. Overlord is [THIS.overlord.GetName]"
                    set_subject_of = {
                        who = PREV
                        subject_type = iicso_civilian_subject
                    }
                    set_country_flag = iicso_civilian_country
                    set_country_flag = civ_faction_of@PREV
                    copy_techs_from = { target = PREV }
                    set_name = random
                    #log = "[THIS.GetName] is economy vassal of [PREV.GetName]"

                    #share comms with every country who already has comms with parent country
                    every_country = {
                        limit = {
                            OR = {
                                is_country_type = default
                                is_country_type = fallen_empire
                                is_country_type = awakened_fallen_empire
                            }
                            has_communications = PREVPREV
                            NOT = { has_country_flag = civ_faction@PREV }
                        }
                        establish_communications_no_message = PREV

                        #only be hostile to civs if hostile to all, or at war with parent and hostile to enemy civs
                        if = {
                            limit = {
                                OR = {
                                    has_policy_flag = hostile_to_all_civilians
                                    AND = {
                                        has_policy_flag = hostile_to_enemy_civilians
                                        is_at_war_with = PREVPREV
                                    }
                                }
                            }
                            set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                        }
                    }
                }
                #log = "[THIS.GetName] is economy overlord of [last_created_country.GetName]"

                if = {
                    limit = { has_country_flag = avoiding_first_contact }
                    remove_country_flag = Story7
                    remove_country_flag = avoiding_first_contact
                }
            }
        }

        #reestablish vassalhood (important if parent country is vassalised and later becomes free, for example)
        every_country = {
            limit = { has_country_flag = iicso_civilian_country }

            random_country = {
                limit = { has_country_flag = civ_faction@PREV }
                
                save_event_target_as = parent_empire
            }
            copy_techs_from = { target = event_target:parent_empire }
            if = {
                limit = {
                    OR = {
                        is_subject = no
                        overlord = { NOT = { has_country_flag = civ_faction@PREV }}
                    }
                    any_country = {
                        has_country_flag = civ_faction@PREV
                        is_subject = no
                    }
                }
                event_target:parent_empire = {
                    PREV = {
                        set_subject_of = {
                            who = PREV
                            subject_type = iicso_civilian_subject
                        }
                    }
                }
            }

            #delete civ faction if parent empire dies
            if = {
                limit = { NOT = { exists = event_target:parent_empire }}
                destroy_country = yes
            }

        }
    }
}

#triggered by communications established with from; establishes communications with civilian empires
country_event = {
    id = iicso.201
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        random_country = {
            limit = { has_country_flag = civ_faction_of@ROOT }
            establish_communications_no_message = FROM
            FROM = {
                if = {
                    limit = { has_policy_flag = hostile_to_all_civilians }
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
        random_country = {
            limit = { has_country_flag = civ_faction_of@FROM }
            establish_communications_no_message = ROOT
            ROOT = {
                if = {
                    limit = { has_policy_flag = hostile_to_all_civilians }
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
    }
}

#sets country with appropriate policy hostile to enemy civilians on war start
#called from on war beginning, on war entered
country_event = {
    id = iicso.210
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        has_policy_flag = hostile_to_enemy_civilians
    }

    immediate = {
        every_country = {
            limit = { is_at_war_with = PREV }
            random_country = {
                limit = { has_country_flag = civ_faction_of@PREV }
                PREVPREV = {
                    set_faction_hostility = { target = PREV set_hostile = yes set_neutral = no set_friendly = no }
                }
            }
        }
    }
}

#on war end sets countries with appropriate policy back to neutral with former enemy civilian factions
#does this even work??
country_event = {
    id = iicso.211
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "a war has ended"

        every_war_defender = {
            enemy = FROM
            limit = { has_policy_flag = hostile_to_enemy_civilians }
            ROOT = {
                every_war_attacker = {
                    enemy = FROM
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }
                        PREVPREVPREV = {
                            set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                        }
                    }
                }
            }
        }

        every_war_attacker = {
            enemy = FROM
            limit = { has_policy_flag = hostile_to_enemy_civilians }
            ROOT = {
                every_war_defender = {
                    enemy = FROM
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }
                        PREVPREVPREV = {
                            set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
                        }
                    }
                }
            }
        }

        # every_country = {
        #     limit = { has_policy_flag = hostile_to_enemy_civilians }
        #     log = "war ended, [THIS.GetName] hostile only to enemy civilians"
        #     every_country = {
        #         limit = {
        #             any_country = {
        #                 has_country_flag = civ_faction@PREV
        #                 NOT = { is_at_war_with = PREVPREV }
        #             }
        #             has_communications = PREV
        #         }
        #         log = "war ended, [THIS.GetName] is not at war with [PREV.GetName]"
        #         PREV = { 
        #             set_faction_hostility = { target = PREV set_hostile = no set_neutral = yes set_friendly = no }
        #         }
        #     }
        # }
    }
}

#needs to trigger event after war has cleared out
#???
# country_event = {
#     id= iicso.212
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         country_event = {
#             id = iicso.211
#             days = 5
#         }
#     }
# }

#########################################################
############# 4xx. Autonomous Miner Events ##############
#########################################################

#spawns autonomous miners that mine bodies with no station
#called on yearly pulse
event = {
    id = iicso.400
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = {
                OR = {
                    is_country_type = default
                    is_country_type = awakened_fallen_empire
                }
            }
            every_owned_planet = {
                limit = { NOT = { is_under_colonization = yes }}
                planet_event = {
                    id = iicso.401
                    days = 1
                    random = 359
                }
            }
        }
    }
}

#called from iicso.400
planet_event = {
    id = iicso.401
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        random_country = {
            limit = {
                has_country_flag = civ_faction_of@ROOT.owner
            }
            if = {
                limit = {
                    ROOT.solar_system = {
                        any_ship_in_system = {
                            fleet = {
                                owner = { NOT = { is_hostile = ROOT.owner }}
                            }
                        }
                    }
                    count_owned_ships = {
                        limit = {
                            fleet = {
                                has_fleet_flag = civilian_miner
                                has_fleet_flag = home_colony@ROOT
                            }
                        }
                        count < 2
                    }
                }
                create_fleet = {
                    name = miner_fleet
                    effect = {
                        set_owner = PREV
                        create_ship = {
                            name = random
                            design = random_existing_design
                            random_existing_design = z_iicso_miner
                        }
                        last_created_ship = {
                            set_ship_flag = civilian_miner
                        }
                        set_fleet_flag = civilian_miner
                        set_fleet_flag = home_colony@ROOT
                        set_timed_fleet_flag = {
                            flag = orders_received
                            days = 120
                        }
                        set_location = ROOT
                        #log = "Created miner at [ROOT.GetName]"
                    }
                }
    
                last_created_fleet = {
                    fleet_event = {
                        id = iicso.402
                        days = 3
                        random = 7
                    }
                }
            }
        }
    }
}

#miner decides which body to go mine
#called from iicso.401, iicso.403, iicso.406, effect deposit_cargo_at_colony
fleet_event = {
    id = iicso.402
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        exists = FROM
    }

    immediate = {
        remove_fleet_flag = enroute_to_mine
        remove_fleet_flag = pending_mine_target
        set_timed_fleet_flag = {
            flag = orders_received
            days = 120
        }
        #if = { limit = { owner = { overlord = { is_ai = no }}} log = "miner event started" }
        random_planet = {
            limit = { PREV = { has_fleet_flag = home_colony@PREV }}
            #if = { limit = { ROOT = { owner = { overlord = { is_ai = no }}}} log = "found home colony [THIS.GetName]" }
            
            random_planet = {
                limit = {
                    solar_system = { has_star_flag = nearest_colony_system@PREVPREV.solar_system }
                    can_mine_planet = yes
                    NOT = { has_mining_station = yes }
                    NOT = { has_planet_flag = being_mined }
                    NOT = { has_planet_flag = miner_enroute}
                    has_planet_flag = iicso_resources_set
                    is_surveyed = { who = PREV.owner status = yes }
                    NOT = { has_anomaly = yes }
                }
                #if = { limit = { ROOT = { owner = { overlord = { is_ai = no }}}} log = "found target planet [THIS.GetName]" }
                set_timed_planet_flag = { flag = miner_enroute days = 90 }
                ROOT = {
                    set_fleet_flag = enroute_to_mine
                    auto_move_to_planet = { target = PREV clear_auto_move_on_arrival = yes }
                    #if = { limit = { owner = { overlord = { is_ai = no }}} log = "[THIS.GetName] enroute to [PREV.GetName]" }
                }
            }
        }
        if = {
            limit = { NOT = { has_auto_move_target = yes }}
            set_fleet_flag = pending_mine_target
        }
    }
}

#called by on_fleet_auto_move_arrival; FROM is the fleet
country_event = {
    id = iicso.403
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROM = { has_fleet_flag = civilian_miner }
    }

    immediate = {
        FROM = {
            if = {
                limit = { has_fleet_flag = enroute_to_mine }
                remove_fleet_flag = enroute_to_mine
                if = {
                    limit = { orbit = { has_planet_flag = being_mined }}
                    fleet_event = {
                        id = iicso.402
                        days = 2
                    }
                }
                else = {
                    set_fleet_flag = mining_in_progress@orbit
                    orbit = {
                        set_timed_planet_flag = {
                            flag = being_mined
                            days = 30
                        }
                        remove_planet_flag = miner_enroute
                    }
                    #log = "Miner arrived at mining target [orbit.GetName]"
                }
            }
        }
    }
}

#adds cargo to autonomous miners, sends them back to colony when full
#called by on_monthly_pulse
event = {
    id = iicso.404
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = { has_country_flag = iicso_civilian_country }
            every_owned_fleet = {
                limit = {
                    has_fleet_flag = civilian_miner
                    exists = solar_system
                    solar_system = {
                        any_system_planet = {
                            PREVPREV = { has_fleet_flag = mining_in_progress@PREV }
                        }
                    }
                }

                solar_system = {
                    random_system_planet = {
                        limit = { PREVPREV = { has_fleet_flag = mining_in_progress@PREV }}
                        save_event_target_as = mined_planet
                    }
                }

                calculate_empty_cargo = yes
                add_cargo_to_miner = yes
                #log = "[THIS.GetName] is mining [orbit.GetName]. Current cargo [THIS.cargo]"

                if = {
                    limit = { check_variable = { which = empty_cargo value = 0 }}

                    remove_fleet_flag = mining_in_progress@event_target:mined_planet
                    event_target:mined_planet = { remove_planet_flag = being_mined }

                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    set_fleet_flag = enroute_to_home

                    random_planet = {
                        limit = { PREV = { has_fleet_flag = home_colony@PREV }}
                        PREV = {
                            auto_move_to_planet = {
                                target = PREV
                                clear_auto_move_on_arrival = no
                                arrival_effect = deposit_cargo_at_colony
                            }
                        }
                    }
                    
                }
                else = {
                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    event_target:mined_planet = {
                        set_timed_planet_flag = {
                            flag = being_mined
                            days = 30
                        }
                    }
                }
            }
        }
    }
}




#rerelays current destination in case ship ends up idle (runs for miners & freighters)
#called by on monthly pulse
event = {
    id = iicso.406
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = { has_country_flag = iicso_civilian_country }
            every_owned_fleet = {
                limit = { NOT = { has_fleet_flag = orders_received }}
                if = {
                    limit = { has_fleet_flag = enroute_to_home }

                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }

                    random_planet = {
                        limit = { PREV = { has_fleet_flag = home_colony@PREV }}
                        PREV = {
                            auto_move_to_planet = {
                                target = PREV
                                clear_auto_move_on_arrival = no
                                arrival_effect = deposit_cargo_at_colony
                            }
                        }
                    }
                }
                else_if = {
                    limit = {
                        OR = {
                            has_fleet_flag = pending_mine_target
                            has_fleet_flag = enroute_to_mine
                        }
                    }
                    fleet_event = {
                        id = iicso.402
                        days = 1
                        random = 29
                    }
                }
                else_if = {
                    limit = { 
                        any_system ={
                            any_system_planet = {
                                PREVPREV = {
                                    has_fleet_flag = enroute_to_starbase@PREV
                                }
                            }
                        }
                    }
                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    random_planet = {
                        limit = { PREV = { has_fleet_flag = enroute_to_starbase@PREV }}
                        PREV = {
                            auto_move_to_planet = {
                                target = PREV
                                clear_auto_move_on_arrival = no
                                arrival_effect = deposit_cargo_at_starbase
                            }
                        }
                        
                    }
                }
                else_if = {
                    limit = { 
                        any_system ={
                            any_system_planet = {
                                PREVPREV = {
                                    has_fleet_flag = enroute_to_colony@PREV
                                }
                            }
                        }
                    }
                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    random_planet = {
                        limit = { PREV = { has_fleet_flag = enroute_to_colony@PREV }}
                        PREV = {
                            auto_move_to_planet = {
                                target = PREV
                                clear_auto_move_on_arrival = no
                                arrival_effect = deposit_cargo_at_colony
                            } 
                        }
                    }
                }
                else_if = {
                    limit = { NOT = { has_fleet_flag = pending_reassignment }}
                    delete_fleet = THIS
                }
            }
        }
    }
}


#called by on_starbase_transfer
#reassigns miner to new colony; THIS = starbase ship scope, FROM = former owner
ship_event = {
    id = iicso.420
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        solar_system = {
            any_system_planet = { is_colony = yes }
        }
        exists = FROM
    }

    immediate = {
        solar_system = {
            every_system_planet = {
                limit = { is_colony = yes }
                save_event_target_as = former_colony

                FROM = {
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }
                        every_owned_fleet = {
                            limit = {
                                has_fleet_flag = home_colony@event_target:former_colony
                                has_fleet_flag = civilian_miner
                            }

                            closest_system = {
                                limit = {
                                    any_system_planet = {
                                        is_colony = yes
                                        exists = owner
                                        owner = { is_same_value = FROM }
                                    }
                                }
                                random_system_planet = {
                                    limit = {
                                        is_colony = yes
                                        exists = owner
                                        owner = { is_same_value = FROM }
                                    }
                                    save_event_target_as = new_closest_colony
                                }
                            }

                            remove_fleet_flag = home_colony@event_target:former_colony
                            set_fleet_flag = home_colony@event_target:new_closest_colony

                            if = {
                                limit = {
                                    event_target:new_closest_colony = {
                                        owner = {
                                            count_owned_ships = {
                                                limit = {
                                                    fleet = {
                                                        has_fleet_flag = civilian_miner
                                                        has_fleet_flag = home_colony@PREVPREVPREV
                                                    }
                                                }
                                                count >= 3
                                            }
                                        }
                                    }
                                }
                                set_fleet_flag = kill_switch
                            }

                            set_timed_fleet_flag = {
                                flag = orders_received
                                days = 120
                            }
                            remove_fleet_flag = enroute_to_mine
                            set_fleet_flag = enroute_to_home
                            remove_auto_move_target = yes
                            auto_move_to_planet = { target = event_target:new_closest_colony clear_auto_move_on_arrival = yes }
                        }
                    }
                }
            }
        }
    }
}

#########################################################
######### 6xx. Intercolonial Freighter Events ###########
#########################################################

# #called by monthly pulse
# event = {
#     id = iicso.600
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         every_country = {
#             limit = {
#                 any_country = { has_country_flag = civ_faction_of@PREV }
#             }
#             random_country = {
#                 limit = { has_country_flag = civ_faction_of@PREV }
#                 save_event_target_as = civ_economy_country
#             }
#             every_owned_planet = {
#                 limit = { check_variable = { which = planet_mineral_stockpile value > 10 }}

#                 create_fleet = {
#                     name = intercolonial_freighter_fleet
#                     effect = {
#                         set_owner = event_target:civ_economy_country
#                         while = {
#                             limit = { PREV = { check_variable = { which = planet_mineral_stockpile value > 10 }}}
                            
#                             create_ship = {
#                                 name = random
#                                 design = random_existing_design
#                                 random_existing_design = z_iicso_freighter
#                             }

#                             PREV = { change_variable = { which = planet_mineral_stockpile value = -10 }}
#                             change_variable = { which = cargo value = 10 }
#                         }
#                         set_fleet_flag = home_planet@PREV
#                         set_fleet_flag = civilian_intercolonial_freighter
#                         set_location = PREV
#                     }
#                 }

#                 last_created_fleet = {
#                     fleet_event = {
#                         id = iicso.601
#                         days = 5
#                     }
#                 }
#             }
#         }
#     }
# }

# #called by other freighter events; sends the freighter to capital/home planet
# fleet_event = {
#     id = iicso.601
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         random_country = {
#             limit = {
#                 has_country_flag = civ_faction@ROOT.owner
#             }
#             capital_scope = {
#                 ROOT = {
#                     set_timed_fleet_flag = {
#                         flag = orders_received
#                         days = 120
#                     }
#                     set_fleet_flag = enroute_to_capital
#                     auto_move_to_planet = { target = PREV clear_auto_move_on_arrival = yes }
#                 }
#             }
#         }
#     }
# }

# #called by auto move arrival
# country_event = {
#     id = iicso.602
#     is_triggered_only = yes
#     hide_window = yes

#     trigger = {
#         FROM = {
#             has_fleet_flag = civilian_intercolonial_freighter
#             NOT = { has_fleet_flag = auto_move_arrival }
#         }
#     }
#     immediate = {
#         FROM = {
#             set_timed_fleet_flag = {
#                 flag = auto_move_arrival
#                 days = 2
#             }
#             #if = { limit = { owner = { overlord = { is_ai = no }}} log = "[THIS.GetName] auto move completion at [orbit.GetName]" }
#             if = {
#                 limit = { has_fleet_flag = enroute_to_home_planet }
#                 fleet_event = {
#                     id = iicso.603
#                     days = 10
#                     random = 5
#                 }
#             }
#             else_if = {
#                 limit = { has_fleet_flag = enroute_to_capital }
#                 #log = "Miner arrived at home base [orbit.GetName]"
#                 remove_fleet_flag = enroute_to_capital

#                 while = {
#                     limit = { check_variable = { which = cargo value > 0 }}
#                     change_variable = { which = cargo value = -1 }
#                     #orbit = { owner = { add_minerals = 1 }}
#                 }

#                 fleet_event = { #send it back to the station
#                     id = iicso.604
#                     days = 10
#                     random = 5
#                 }
#             }
#         }
#     }
# }

# #destroys fleet when it returns home
# fleet_event = {
#     id = iicso.603
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         destroy_fleet = THIS
#     }
# }

# #called by other freighter events; sends the freighter to home planet
# fleet_event = {
#     id = iicso.604
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         random_planet = {
#             limit = {
#                 ROOT = { has_fleet_flag = home_planet@PREV }
#             }
#             ROOT = {
#                 set_timed_fleet_flag = {
#                     flag = orders_received
#                     days = 120
#                 }
#                 set_fleet_flag = enroute_to_home_planet
#                 auto_move_to_planet = { target = PREV clear_auto_move_on_arrival = yes }
#             }
#         }
#     }
# }

###################################################################
############## 7xx. Interimperial Trade Ship Events ###############
###################################################################

#called by annual pulse
#25% chance any given planet will try to send out a trader each year
event = {
    id = iicso.700
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = {
                is_country_type = default
                any_country = {
                    has_commercial_pact = PREV
                }
            }
            random_country = {
                limit = { has_commercial_pact = PREV }
                log = "[PREV.GetName] can roll for traders. Has pact with at least [THIS.GetName]"
            }
            every_owned_planet = {
                #log = "[THIS.GetName] for empire [THIS.owner.GetName] is rolling for traders!"
                PREV = { change_variable = { which = planets_traders_rolled value = 1 }}
                random_list = {
                    25 = {
                        #log = "[THIS.GetName] has elected to send a trader this year!"
                        planet_event = {
                            id = iicso.701
                            days = 1
                            random = 359
                        }
                        PREV = { change_variable = { which = planets_traders_rolled_succ value = 1 }}
                    }
                    75 = {}
                }
            }
            log = "[THIS.GetName] rolled [THIS.planets_traders_rolled] planets with [THIS.planets_traders_rolled_succ] successes"
        }
    }
}

planet_event = {
    id = iicso.701
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        log = "[THIS.GetName] in [THIS.Owner.GetName] is searching for a trader target..."
        random_planet = {
            limit = {
                is_colony = yes
                owner = { has_commercial_pact = PREVPREV.owner }
                controller = { is_same_value = PREV.owner }
                NOT = { has_orbital_bombardment = yes }
            }
            weights = { #prefers closer targets
                base = 0
                modifier = {
                    add = 5
                    is_capital = yes
                }
                modifier = {
                    add = 17
                    distance = {
                        source = PREV
                        min_jumps = 0
                        max_jumps = 5
                    }
                }
                modifier = {
                    add = 13
                    distance = {
                        source = PREV
                        min_jumps = 6
                        max_jumps = 10
                    }
                }
                modifier = {
                    add = 9
                    distance = {
                        source = PREV
                        min_jumps = 11
                        max_jumps = 15
                    }
                }
                modifier = {
                    add = 5
                    distance = {
                        source = PREV
                        min_jumps = 16
                        max_jumps = 20
                    }
                }
                modifier = {
                    add = 1
                    distance = {
                        source = PREV
                        min_jumps = 21
                        max_jumps = 25
                    }
                }
            }
            log = "[PREV.GetName] in [PREV.owner.GetName] has found trader target - it's [THIS.GetName] in empire [THIS.owner.GetName]!"
            random_country = {
                limit = { has_country_flag = civ_faction_of@ROOT.owner }
                create_fleet = {
                    name = trader_fleet
                    effect = {
                        set_owner = PREV
                        set_location = ROOT
                        set_fleet_flag = trader_home@ROOT
                        set_fleet_flag = trader_destination@PREVPREV
                        set_fleet_flag = trader_fleet
                        create_ship = { name = random design = random_existing_design random_existing_design = z_iicso_freighter_armed }
                        set_fleet_stance = evasive
                    }
                }
                last_created_fleet = {
                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    auto_move_to_planet = {
                        target = PREVPREV
                        clear_auto_move_on_arrival = no
                    }
                }
            }
        }
    }
}



# event = {
#     id = iicso.6000
#     is_triggered_only = yes
#     hide_window = yes

#     immediate = {
#         random_country = {
#             limit = {
#                 OR = {
#                     has_country_flag = counting_country
#                     NOT = { any_country = { has_country_flag = counting_country }}
#                 }
#             }
#             set_country_flag = counting_country
#             save_event_target_as = player_country
#             set_variable = { which = civilian_ship_count value = 0 }
#         }
#         every_country = {
#             limit = { has_country_flag = iicso_civilian_country }
#             every_owned_ship = {
#                 event_target:player_country = { change_variable = { which = civilian_ship_count value = 1 }}
#             }
#         }
#         event_target:player_country = {
#             if = {
#                 limit = { check_variable = { which = civilian_ship_count value > 0 }} 
#                 log = "[THIS.GetName] says there are [THIS.civilian_ship_count] civilian ships"
#             }
#         }
#     }
# }