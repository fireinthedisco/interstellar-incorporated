namespace = interstellar_inc

@station_freighter_cargo = 10
@stockpile_value_spawn_freighter = 30


#########################################################
############### 1xx. Resource Management ################
#########################################################
event = {
    id = interstellar_inc.100
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "initial event triggered"
        every_planet = {
            limit = { is_colony = no }

            if = { #immediately set up all planets in starting systems and their neighbors
                limit = {
                    solar_system = {
                        OR = {
                            starting_system = yes
                            any_neighbor_system = { starting_system = yes }
                        }
                    }
                }
                planet_event = {
                    id = interstellar_inc.101
                }
            }
            else = { #and take care of the rest over the course of the year
                planet_event = {
                    id = interstellar_inc.101
                    days = 1
                    random = 359
                }
            }
        }
        every_system = {
            limit = { exists = space_owner }
            random_planet = {
                planet_event = {
                    id = interstellar_inc.104
                }
            }
        }
    }
}

#determines closest colony system and number of resources on each planet; called again every year
planet_event = {
    id = interstellar_inc.101
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        #log = "triggered on planet [THIS.GetName]"
        if = { #first find how many resources the mining station produces
            if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 1 }}}
                set_variable = {which = min_resources_interstellar_inc_var value = 1}
            }
            else_if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 2 }}}
                set_variable = {which = min_resources_interstellar_inc_var value = 2}
            }
            else_if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 3 }}}
                set_variable = {which = min_resources_interstellar_inc_var value = 3}
            }
            else_if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 4 }}}
                set_variable = {which = min_resources_interstellar_inc_var value = 4}
            }
            else_if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 5 }}}
                set_variable = {which = min_resources_interstellar_inc_var value = 5}
            }
            else_if = {
                limit = { orbital_deposit_tile = { has_resource = { type = minerals amount = 6 }}}
                set_variable = { which = min_resources_interstellar_inc_var value = 6 }
            }
            set_planet_flag = resources_set_interstellar_inc_flag
        }
        #log = "planet [THIS.GetName] has [THIS.min_resources_interstellar_inc_var] minerals"

        planet_event = { #check both again a year from now (staggered across the year for different stations, since we triggered it staggered first time)
            id = interstellar_inc.101
            days = 360
        }
    }
}

#removes mined resources from empire total, stores it in station stockpile
event = {
    id = interstellar_inc.102
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            every_mining_station = {
                while = {
                    count = orbit.min_resources_interstellar_inc_var
                    owner = {add_minerals = -1 }
                    orbit = {
                        change_variable = { which = station_stock_interinc_var value = 1 }
                    }
                }
            }
        }
    }
}

#finds closest system with a colony of whoever owns the system; called when starbase is built, when colonies in empire are created, when starbases change hands
planet_event = {
    id = interstellar_inc.103
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_system = { #every system that has flag pointing to this event's planet's solar system
            limit = {
                ROOT = {
                    solar_system = {
                        PREVPREV = { has_star_flag = nearest_colony_system@PREV }
                    }
                }
            }
            remove_star_flag = nearest_colony_system@ROOT.solar_system
        }

        if = {
            limit = { exists = FROM }
            FROM = { save_event_target_as = colony_owner }
            owner = { save_event_target_as = prev_owner }
        }
        else_if = {
            limit = { exists = owner }
            owner = { save_event_target_as = colony_owner }
        }

        if = {
            limit = { exists = event_target:colony_owner }
            event_target:colony_owner = {
                every_system_within_border = {
                    random_planet = {
                        planet_event = {
                            id = interstellar_inc.104
                            days = 3
                        }
                    }
                }
            }
        }
        if = {
            limit = { exists = event_target:prev_owner }
            event_target:colony_owner = {
                every_system_within_border = {
                    random_planet = {
                        planet_event = {
                            id = interstellar_inc.104
                            days = 3
                        }
                    }
                }
            }
        }
    }
}

#calculates closest colony for given system
planet_event = {
    id = interstellar_inc.104
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        solar_system = {
            random_system = {
                limit = { PREV = { has_star_flag = nearest_colony_system@PREV }}
                PREV = { remove_star_flag = nearest_colony_system@PREV }
            }
            if = {
                limit = { exists = space_owner }
                closest_system = {
                    limit = {
                        any_planet = {
                            is_colony = yes
                            exists = owner
                            owner = { is_same_value = ROOT.space_owner }
                        }
                    }
                    save_event_target_as = nearest_colony_system
                }
            }
            set_star_flag = nearest_colony_system@event_target:nearest_colony_system
        }
    }
}

#called on starbase transfer or starbase being built, triggers 104 to calculate closest colony for system
ship_event = {
    id = interstellar_inc.105
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        solar_system = {
            random_planet = {
                planet_event = {
                    id = interstellar_inc.104
                    days = 3
                }
            }
        }
    }
}


#########################################################
################ 2xx. Faction Spawning ##################
#########################################################

#spawns civilian trader faction for each empire
event = {
    id = interstellar_inc.200
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
			limit = {
				OR = {
					is_country_type = default
                    is_country_type = awakened_fallen_empire
                    is_country_type = fallen_empire
                }
                NOT = {
                    any_country = {
                        has_country_flag = civ_faction_of@PREV
                        has_country_flag = civilian_country_interinc_flag
                    }
                }
            }

            set_country_flag = Story7

            if = {
                limit = {
                    is_synthetic_empire = yes
                }
                create_country = {
                    name = "[THIS.GetAdj] Autonomous Transports"
                    type = civilian_economy
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
            }
            else_if = {
                limit = {
                    has_authority = auth_hive_mind
                }
                create_country = {
                    name = "[THIS.GetAdj] Carrier Drones"
                    type = civilian_economy
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
            }
            else = {
                create_country = {
                    name = "[THIS.GetAdj] Civilian Vessels"
                    type = civilian_economy
                    auto_delete = no
    
                    flag = THIS
                    name_list = THIS
                    species = THIS
                }
            }
            establish_communications_no_message = last_created_country

            last_created_country = {
                #log = "test: [THIS.GetName] is a civilian empire. Overlord is [THIS.overlord.GetName]"
                set_subject_of = {
                    who = PREV
                    subject_type = civilian_interstellar_inc
                }
                set_country_flag = civilian_country_interinc_flag
                set_country_flag = day_0
                set_country_flag = radical_cult
                set_country_flag = civ_faction_of@PREV
            }
            set_country_flag = civ_faction@last_created_country
        }

        #reestablish vassalhood (important if parent country is vassalised and later becomes free, for example)
        every_country = {
            limit = { has_country_flag = civilian_country_interinc_flag }

            random_country = {
                limit = { has_country_flag = civ_faction@PREV }
                save_event_target_as = parent_empire
            }
            if = {
                limit = {
                    OR = {
                        is_subject = no
                        overlord = { NOT = { has_country_flag = civ_faction@PREV }}
                    }
                    any_country = {
                        has_country_flag = civ_faction@PREV
                        is_subject = no
                    }
                }
                event_target:parent_empire = {
                    PREV = {
                        set_subject_of = {
                            who = PREV
                            subject_type = civilian_interstellar_inc
                        }
                    }
                }
            }

            #delete civ faction if parent empire dies
            if = {
                limit = { NOT = { exists = event_target:parent_empire }}
                destroy_country = yes
            }

        }
    }
}


#########################################################
############# 4xx. Autonomous Miner Events ##############
#########################################################

#spawns autonomous miners that mine bodies with no station
event = {
    id = interstellar_inc.400
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = { has_country_flag = civilian_country_interinc_flag }
            #log = "[THIS.GetName] country selected"
            random_country = {
                limit = { has_country_flag = civ_faction@PREV }
                every_owned_planet = {
                    limit = {
                        owner = {
                            any_planet_within_border = {
                                NOT = { has_mining_station = yes }
                                orbital_deposit_tile = { has_resource = { type = minerals amount > 0 }}
                                has_planet_flag = resources_set_interstellar_inc_flag
                                solar_system = { has_star_flag = nearest_colony_system@PREVPREVPREV.solar_system }
                                NOT = { has_planet_flag = being_mined }
                                NOT = { has_planet_flag = miner_enroute }
                                PREVPREV = { check_variable = { which = colony_miners value < 3 }}
                            }
                        }
                    }
                    #log = "Picked [THIS.GetName] planet"
                    create_fleet = {
                        name = miner_fleet
                        effect = {
                            set_owner = PREVPREVPREV
                            create_ship = {
                                name = random
                                design = random_existing_design
                                random_existing_design = interstellarinc_miner
                            }
                            set_fleet_flag = civilian_miner
                            set_location = PREV
                            #log = "Created miner at [PREV.GetName]"
                        }
                    }
                    change_variable = { which = colony_miners value = 1 }

                    last_created_fleet = {
                        set_fleet_flag = home_colony@PREV
                        fleet_event = {
                            id = interstellar_inc.401
                        }
                    }
                }
            }
        }
    }
}

#called by other autonomous miner events; miner decides which body to go mine
fleet_event = {
    id = interstellar_inc.401
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        remove_fleet_flag = enroute_to_mine
        remove_fleet_flag = pending_mine_target
        set_timed_fleet_flag = {
            flag = orders_received
            days = 120
        }
        random_planet = {
            limit = { PREV = { has_fleet_flag = home_colony@PREV }}
            save_event_target_as = home_colony
        }
        random_planet = {
            limit = {
                solar_system = { has_star_flag = nearest_colony_system@event_target:home_colony.solar_system }
                orbital_deposit_tile = { has_resource = { type = minerals amount > 0 }}
                NOT = { has_mining_station = yes }
                NOT = { has_planet_flag = being_mined }
                NOT = { has_planet_flag = miner_enroute}
                has_planet_flag = resources_set_interstellar_inc_flag
            }
            set_timed_planet_flag = { flag = miner_enroute days = 90 }
            save_event_target_as = destination_planet
            #log = "Has destination planet at [THIS.GetName]"
        }
        if = {
            limit = { exists = event_target:destination_planet }
            set_fleet_flag = enroute_to_mine
            auto_move_to_planet = { target = event_target:destination_planet clear_auto_move_on_arrival = yes }
        }
        else = {
            set_fleet_flag = pending_mine_target
        }
    }
}

#called by on_fleet_auto_move_arrival; FROM is the fleet
country_event = {
    id = interstellar_inc.402
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROM = { has_fleet_flag = civilian_miner }
    }

    immediate = {
        FROM = {
            if = {
                limit = { has_fleet_flag = enroute_to_mine }
                remove_fleet_flag = enroute_to_mine
                if = {
                    limit = { orbit = { has_planet_flag = being_mined }}
                    fleet_event = {
                        id = interstellar_inc.404
                    }
                }
                else = {
                    set_fleet_flag = mining_in_progress
                    orbit = {
                        set_timed_planet_flag = {
                            flag = being_mined
                            days = 30
                        }
                        remove_planet_flag = miner_enroute
                    }
                    #log = "Miner arrived at mining target [orbit.GetName]"
                }
            }
            else_if = {
                limit = { has_fleet_flag = enroute_to_home }
                #log = "Miner arrived at home base [orbit.GetName]"
                remove_fleet_flag = enroute_to_home
                if = {
                    limit = {
                        check_variable = { which = fleet_cargo value = 10 }
                    }
                    change_variable =  {which = fleet_cargo value = -10 }
                    orbit = { owner = { add_minerals = 10 }}
                }
                else = {
                    while = {
                        limit = { check_variable = { which = fleet_cargo value > 0 }}
                        change_variable = { which = fleet_cargo value = -1 }
                        orbit = { owner = { add_minerals = 1 }}
                    }
                }
                
                if = {
                    limit = { has_fleet_flag = kill_switch }
                    delete_fleet = THIS
                }
                else = {
                    fleet_event = {
                        id = interstellar_inc.401
                        days = 10
                        random = 10
                    }
                }
            }
        }
    }
}

#adds cargo to autonomous miners, sends them back to colony when full; triggered by on_monthly_pulse
event = {
    id = interstellar_inc.403
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            every_owned_fleet = {
                limit = { has_fleet_flag = mining_in_progress }

                set_variable = { which = min_resources_interstellar_inc_var value = orbit }
                change_variable = { which = fleet_cargo value = min_resources_interstellar_inc_var }

                if = {
                    limit = { check_variable = { which = fleet_cargo value > 10 }}
                    set_variable = { which = fleet_cargo value = 10 }
                }
                #log = "[THIS.GetName] is mining [orbit.GetName]. Current cargo [THIS.fleet_cargo]"

                if = {
                    limit = { check_variable = { which = fleet_cargo value = 10 }}

                    remove_fleet_flag = mining_in_progress
                    orbit = { remove_planet_flag = being_mined }
                    set_variable = { which = min_resources_interstellar_inc_var value = 0 }

                    fleet_event = {
                        id = interstellar_inc.404
                    }
                }
                else = {
                    orbit = {
                        set_timed_planet_flag = {
                            flag = being_mined
                            days = 30
                        }
                    }
                }
            }
        }
    }
}

#send the fleet back to home base
fleet_event = {
    id = interstellar_inc.404
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        random_planet = {
            limit = { PREV = { has_fleet_flag = home_colony@PREV }}
            save_event_target_as = destination_planet
        }
        
        set_timed_fleet_flag = {
            flag = orders_received
            days = 120
        }
        set_fleet_flag = enroute_to_home
        auto_move_to_planet = { target = event_target:destination_planet clear_auto_move_on_arrival = yes }
    }
}

#rerelays current destination in case ship ends up idle (runs for miners & freighters)
event = {
    id = interstellar_inc.405
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = { has_country_flag = civilian_country_interinc_flag }
            every_owned_fleet = {
                limit = { NOT = { has_fleet_flag = orders_received }}
                if = {
                    limit = { has_fleet_flag = enroute_to_home }
                    fleet_event = {
                        id = interstellar_inc.404
                        days = 1
                        random = 29
                    }
                }
                else_if = {
                    limit = {
                        OR = {
                            has_fleet_flag = pending_mine_target
                            has_fleet_flag = enroute_to_mine
                        }
                    }
                    fleet_event = {
                        id = interstellar_inc.401
                        days = 1
                        random = 29
                    }
                }
                else_if = {
                    limit = { has_fleet_flag = enroute_to_station }
                    fleet_event = {
                        id = interstellar_inc.501
                        days = 1
                        random = 29
                    }
                }
                else_if = {
                    limit = { has_fleet_flag = enroute_to_colony }
                    random_planet = {
                        limit = { PREV = { has_fleet_flag = enroute_to_colony@PREV }}
                        save_event_target_as = home_colony
                    }
                    set_timed_fleet_flag = {
                        flag = orders_received
                        days = 120
                    }
                    auto_move_to_planet = { target = event_target:home_colony clear_auto_move_on_arrival = yes }
                }
                else_if = {
                    limit = { NOT = { has_fleet_flag = pending_reassignment }}
                    delete_fleet = THIS
                }
            }
        }
    }
}


#called by on_starbase_transfer; reassigns miner to new colony; THIS = starbase ship scope, FROM = former owner
ship_event = {
    id = interstellar_inc.420
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        solar_system = {
            any_planet = { is_colony = yes }
        }
        exists = FROM
    }

    immediate = {
        solar_system = {
            every_system_planet = {
                limit = { is_colony = yes }
                save_event_target_as = former_colony

                FROM = {
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }
                        every_owned_fleet = {
                            limit = {
                                has_fleet_flag = home_colony@event_target:former_colony
                                has_fleet_flag = civilian_miner
                            }

                            closest_system = {
                                limit = {
                                    any_planet = {
                                        is_colony = yes
                                        exists = owner
                                        owner = { is_same_value = FROM }
                                    }
                                }
                                random_system_planet = {
                                    limit = {
                                        is_colony = yes
                                        exists = owner
                                        owner = { is_same_value = FROM }
                                    }
                                    save_event_target_as = new_closest_colony
                                }
                            }

                            remove_fleet_flag = home_colony@event_target:former_colony
                            set_fleet_flag = home_colony@event_target:new_closest_colony

                            if = {
                                limit = {
                                    event_target:new_closest_colony = {
                                        check_variable = { which = colony_miners value >= 3 }
                                    }
                                }
                                set_fleet_flag = kill_switch
                            }

                            set_timed_fleet_flag = {
                                flag = orders_received
                                days = 120
                            }
                            remove_fleet_flag = enroute_to_mine
                            set_fleet_flag = enroute_to_home
                            remove_auto_move_target = yes
                            auto_move_to_planet = { target = event_target:new_closest_colony clear_auto_move_on_arrival = yes }
                        }
                    }
                }
            }
        }
    }
}


#########################################################
############ 5xx. Station Freighter Events ##############
#########################################################


event = {
    id = interstellar_inc.500
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = {
                any_country = { has_country_flag = civ_faction_of@PREV }
            }
            random_country = {
                limit = { has_country_flag = civ_faction_of@PREV }
                save_event_target_as = civ_economy_country
            }
            every_mining_station = {
                limit = { orbit = { orbital_deposit_tile = { has_resource = { type = minerals amount > 0 }}}}
                save_event_target_as = my_station

                if = {
                    limit = {
                        event_target:civ_economy_country = {
                            NOT = {
                                any_owned_fleet = {
                                    has_fleet_flag = home_station@PREVPREV.orbit
                                }
                            }
                        }
                    }
                    #log = "[THIS.owner.GetName] has found a suitable station, probably"
                    
                    orbit = {
                        random_system = {
                            limit = {PREV = { solar_system = { has_star_flag = nearest_colony_system@PREVPREV }}}
                            #log = "[PREV.GetName] is pointing to [THIS.GetName]"
                            if = {
                                limit = {
                                    event_target:civ_economy_country = {
                                        any_owned_fleet = {
                                            solar_system = { is_same_value = PREVPREVPREV }
                                            has_fleet_flag = pending_reassignment
                                        }
                                    }
                                }
                                event_target:civ_economy_country = {
                                    random_owned_fleet = {
                                        limit = {
                                            solar_system = { is_same_value = PREVPREVPREV }
                                            has_fleet_flag = pending_reassignment
                                        }
                                        set_name = station_freighter_fleet
                                        set_fleet_flag = home_station@event_target:my_station
                                        remove_fleet_flag = lifeswitch
                                        fleet_event = {
                                            id = interstellar_inc.501
                                            days = 5
                                        }
                                    }
                                }
                            }
                            else = {
                                random_system_planet = {
                                    limit = { is_colony = yes }
                                    create_fleet = {
                                        name = station_freighter_fleet
                                        effect = {
                                            set_owner = event_target:civ_economy_country
                                            create_ship = {
                                                name = random
                                                design = random_existing_design
                                                random_existing_design = interstellarinc_freighter
                                            }
                                            last_created_ship = {
                                                set_ship_flag = civilian_station_freighter
                                            }
                                            set_fleet_flag = home_station@event_target:my_station
                                            set_fleet_flag = civilian_station_freighter
                                            set_location = PREV
                                        }
                                    }
                                }

                                last_created_fleet = {
                                    fleet_event = {
                                        id = interstellar_inc.501
                                        days = 5
                                    }
                                }
                            }
                        }
                    }
                }
            }
            event_target:civ_economy_country = {
                every_owned_fleet = {
                    limit = {
                        has_fleet_flag = pending_reassignment
                        NOT = { has_fleet_flag = lifeswitch }
                    }
                    delete_fleet = THIS
                }
            }
        }
    }
}

#called by other freighter events; sends the freighter to station
fleet_event = {
    id = interstellar_inc.501
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        random_planet = {
            limit = {
                ROOT = { has_fleet_flag = home_station@PREV }
            }
            save_event_target_as = home_station
        }
        set_timed_fleet_flag = {
            flag = orders_received
            days = 120
        }
        set_fleet_flag = enroute_to_station
        auto_move_to_planet = { target = event_target:home_station clear_auto_move_on_arrival = yes }
    }
}

#called by auto move arrival
country_event = {
    id = interstellar_inc.502
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROM = {
            has_fleet_flag = civilian_station_freighter
        }
    }
    immediate = {
        FROM = {
            if = {
                limit = { has_fleet_flag = enroute_to_station }
                #the ship will stay at the station longer if the trip is shorter
                if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 0 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 5
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 1 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 15
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 2 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 30
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 3 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 45
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 4 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 60
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 5 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 75
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 6 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 90
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 7 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 105
                    }
                }
                else_if = {
                    limit = { orbit = { check_variable = { which = station_freighter_delay value = 8 }}}
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 120
                    }
                }
                else = {
                    fleet_event = {
                        id = interstellar_inc.503
                        days = 135
                    }
                }
            }
            else_if = {
                limit = { has_fleet_flag = enroute_to_colony }
                #log = "Miner arrived at home base [orbit.GetName]"
                remove_fleet_flag = enroute_to_colony
                remove_fleet_flag = enroute_to_colony@orbit
                if = { #unload cargo at the colony
                    limit = {
                        check_variable = { which = fleet_cargo value = 10 }
                    }
                    change_variable =  {which = fleet_cargo value = -10 }
                    orbit = { owner = { add_minerals = 10 }}
                }
                else = {
                    while = {
                        limit = { check_variable = { which = fleet_cargo value > 0 }}
                        change_variable = { which = fleet_cargo value = -1 }
                        orbit = { owner = { add_minerals = 1 }}
                    }
                }


                if = {
                    limit = { has_fleet_flag = add_freighter }
                    create_ship = {
                        name = random
                        design = random_existing_design
                        random_existing_design = interstellarinc_freighter
                    }
                    last_created_ship = {
                        set_ship_flag = home_station@event_target:my_station
                        set_ship_flag = civilian_station_freighter
                    }
                    remove_fleet_flag = add_freighter
                }
                if = {
                    limit = { has_fleet_flag = remove_freighter }
                    random_owned_ship = {
                        limit = { has_ship_flag = civilian_station_freighter }
                        delete_ship = THIS
                    }
                    remove_fleet_flag = remove_freighter
                }


                if = {
                    limit = { has_fleet_flag = pending_reassignment}
                    set_timed_fleet_flag = {
                        flag = lifeswitch
                        days = 90
                    }
                }
                else = {
                    fleet_event = { #send it back to the station
                        id = interstellar_inc.501
                        days = 10
                        random = 5
                    }
                }
            }
        }
    }
}

fleet_event = {
    id = interstellar_inc.503
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        remove_fleet_flag = enroute_to_station
        if = { #add cargo to the ship
            limit = { orbit = { check_variable = {which = station_stock_interinc_var value >= 10 }}}
            orbit = { change_variable = {which = station_stock_interinc_var value = -10 }}
            set_variable = { which = fleet_cargo value = 10 }

            if = {
                limit = { orbit = { check_variable = { which = station_freighter_delay value = 0 }}}
                set_fleet_flag = add_freighter
            }
            else = {
                orbit = { change_variable = { which = station_freighter_delay value = -1 }} #if it filled all the way up, the freighter needs to make the trip faster
            }
        }
        else = {
            while = {
                limit = { orbit = { check_variable = { which = station_stock_interinc_var value > 0 }}}
                orbit = {change_variable = { which = station_stock_interinc_var value = -1 }}
                change_variable = { which = fleet_cargo value = 1 }
            }
            orbit = { change_variable = { which = station_freighter_delay value = 1 }} #if station can't fill the freighter, delay trips slightly
            if = {
                limit = {
                    owner = {
                        count_owned_ships = {
                            limit = {
                                fleet = ROOT
                                has_ship_flag = civilian_station_freighter
                            }
                            count > 1
                        }
                    }
                    orbit = { check_variable = { which = station_freighter_delay value > 6 }}
                }
                set_fleet_flag = remove_freighter
            }
        }
        orbit = {
            random_system = {
                limit = { PREV = { solar_system = { has_star_flag = nearest_colony_system@PREVPREV }}}
                random_system_planet = {
                    limit = { is_colony = yes }
                    #log = "I found [THIS.GetName]"
                    save_event_target_as = home_colony
                }
            }
        }
        set_timed_fleet_flag = {
            flag = orders_received
            days = 120
        }
        set_fleet_flag = enroute_to_colony
        set_fleet_flag = enroute_to_colony@home_colony
        auto_move_to_planet = { target = event_target:home_colony clear_auto_move_on_arrival = yes }
    }
}

#called by on_starbase_transfer; reassigns freighter to new stations/colonies; THIS = starbase ship scope, FROM = former owner
fleet_event = {
    id = interstellar_inc.520
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        solar_system = {
            any_planet = {
                OR = {
                    is_colony = yes
                    has_mining_station = yes
                }
            }
        }
        exists = FROM
    }

    immediate = {
        solar_system = {
            every_system_planet = {
                limit = {
                    OR = {
                        has_mining_station = yes
                        is_colony = yes
                    }
                }

                FROM = {
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }

                        if = {
                            limit = { PREVPREV = { has_mining_station = yes }}
                            PREVPREV = { save_event_target_as = former_station }
                            every_owned_fleet = {
                                limit = {
                                    has_fleet_flag = home_station@event_target:former_station
                                    has_fleet_flag = civilian_station_freighter
                                }

                                remove_fleet_flag = home_station@event_target:former_station
                                set_fleet_flag = pending_reassignment
                                closest_system = {
                                    limit = {
                                        any_planet = {
                                            is_colony = yes
                                            owner = FROM
                                        }
                                    }
                                    random_system_planet = {
                                        limit = {
                                            is_colony = yes
                                            owner = FROM
                                        }
                                        save_event_target_as = closest_colony
                                    }
                                }

                                set_timed_fleet_flag = {
                                    flag = orders_received
                                    days = 120
                                }
                                remove_fleet_flag = enroute_to_station
                                set_fleet_flag = enroute_to_colony
                                set_fleet_flag = enroute_to_colony@closest_colony
                                remove_auto_move_target = yes
                                auto_move_to_planet = { target = event_target:closest_colony clear_auto_move_on_arrival = yes }
                            }
                        }

                        else_if = {
                            limit = { PREVPREV = { is_colony = yes }}
                            PREVPREV = { save_event_target_as = former_closest_colony }
                            every_owned_fleet = {
                                limit = {
                                    has_fleet_flag = enroute_to_colony@event_target:former_closest_colony
                                    has_fleet_flag = civilian_station_freighter
                                }

                                closest_system = {
                                    limit = {
                                        any_planet = {
                                            is_colony = yes
                                            owner = FROM
                                        }
                                    }
                                    random_system_planet = {
                                        limit = {
                                            is_colony = yes
                                            owner = FROM
                                        }
                                        save_event_target_as = closest_colony
                                    }
                                }

                                set_timed_fleet_flag = {
                                    flag = orders_received
                                    days = 120
                                }
                                remove_fleet_flag = enroute_to_colony@event_target:former_closest_colony
                                set_fleet_flag = enroute_to_colony@event_target:closest_colony
                                remove_auto_move_target = yes
                                auto_move_to_planet = { target = event_target:closest_colony clear_auto_move_on_arrival = yes }
                            }
                        }
                    }
                }
            }
        }
    }
}

#########################################################
############## 6xx. Migration Ship Events ###############
#########################################################

#triggered by on_pop_migration_end, from: tile on new planet, fromfrom: tile on old 
pop_event = {
    id = interstellar_inc.600
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        create_country = {
            name = random
            type = pop_dummy
            auto_delete = no
            species = ROOT
            ethos = ROOT
        }

        FROMFROM = {
            planet = {
                owner = {
                    random_country = {
                        limit = { has_country_flag = civ_faction_of@PREV }
                        save_event_target_as = civ_faction
                    }
                }
                create_fleet = {
                    name = migration_fleet
                    effect = {
                        set_owner = event_target:civ_faction
                        create_ship = {
                            name = random
                            design = random_existing_design
                            random_existing_design = interstellarinc_freighter
                        }
                        set_fleet_flag = migrating_pop@last_created_country
                        set_fleet_flag = destination_planet@FROM.planet
                        set_fleet_flag = migration_ship
                        set_location = PREV
                    }
                }

                last_created_fleet = {
                    auto_move_to_planet = { target = FROM.planet clear_auto_move_on_arrival = yes }
                }
            }
        }
        
        kill_pop = yes
    }
}

#triggered by auto move completion; FROM is the fleet
country_event = {
    id = interstellar_inc.601
    is_triggered_only = yes
    hide_window = yes

    trigger = {
        FROM = { has_fleet_flag = migration_ship }
    }

    immediate = {
        FROM = {
            random_country = {
                limit = { PREV = { has_fleet_flag = migrating_pop@PREV }}
                save_event_target_as = pop_dummy_country
            }
            orbit = {
                best_tile_for_pop = {
                    create_pop = {
                        species = event_target:pop_dummy_country
                        ethos = event_target:pop_dummy_country
                    }
                }
            }
            event_target:pop_dummy_country = {
                destroy_country = yes
            }
            delete_fleet = THIS
        }
    }
}



event = {
    id = interstellar_inc.6000
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        every_country = {
            limit = { has_country_flag = civilian_country_interinc_flag }
            set_variable = { which = civilian_ship_count value = 0 }
            every_owned_ship = {
                PREV = { change_variable = { which = civilian_ship_count value = 1 }}
            }
            log = "[THIS.GetName] has [THIS.civilian_ship_count] ships"
        }
    }
}